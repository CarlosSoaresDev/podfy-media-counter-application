AWSTemplateFormatVersion : 2010-09-09
Description: Up services to media counter application serverless [ SG, lambda, S3]
Transform: AWS::Serverless-2016-10-31

Parameters:
  ApplicationName:
    Type: String
  AccessKey:
    Type: String
  SecretKey:
    Type: String
  BucketName:
    Description: bucket name to create
    Type: String
  VPC:
    Type: String
  PrivateSubnetOne:
    Type: String
  PrivateSubnetTwo:
    Type: String

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: dotnet6
    CodeUri: s3://lambda-aplication-repository/podfy-media-counter-application/release.zip    
    Environment:
        Variables:
          ACCESS_KEY: !Ref AccessKey
          SECRET_KEY: !Ref SecretKey
    # VpcConfig:
    #   SecurityGroupIds:
    #     - !Ref ServerlessSecurityGroup
    #   SubnetIds:
    #     - !Ref PrivateSubnetOne
    #     - !Ref PrivateSubnetTwo

Resources:

# -------------------------------------------------------------------------
# Deploy SG EC2
# -------------------------------------------------------------------------
  # ServerlessSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: SecurityGroup for Serverless Functions
  #     VpcId: !Ref VPC

# -------------------------------------------------------------------------
# Deploy API Gateway serverless
# -------------------------------------------------------------------------
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${ApplicationName}-api'
      StageName: Prod
      EndpointConfiguration:
        Type: PRIVATE
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          CachingEnabled: true
          CacheTtlInSeconds: 200
      Auth:
        Authorizers: 
           LambdaRequestAuth:
                  FunctionPayloadType: REQUEST
                  FunctionArn: arn:aws:lambda:us-east-1:334110295592:function:service-podfy-user-application-validate-token
                  Identity:
                    Headers:
                      - Authorization
  
# -------------------------------------------------------------------------
# Deploy Lambda serverless function and permission and Role to lambda
# -------------------------------------------------------------------------
  LambdaMediaCounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-mediacounter'
      Description: This lambda api gateway to get all podfy media counter
      Handler: podfy-media-counter-application::podfy_media_counter_application.Function::MediaCounterFunctionHandlerAsync
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: GET
  
  LambdaAddMediaCounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-add-mediacounter'
      Description: This lambda api gateway to get all podfy media counter
      Handler: podfy-media-counter-application::podfy_media_counter_application.Function::AddMediaCounterFunctionHandlerAsync
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: POST
            Auth:
              Authorizer: LambdaRequestAuth

  LambdaDeleteMediaCounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ApplicationName}-delete-mediacounter'
      Description: This lambda register an new counter by trigger s3 event
      Handler: podfy-media-counter-application::podfy_media_counter_application.Function::DeleteMediaCounterFunctionHandlerAsync
      Role: !GetAtt LambdaMediaCounterExecutionRole.Arn      

  LambdaDeleteMediaCounterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaDeleteMediaCounterFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'

  LambdaMediaCounterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: AllowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"
        - PolicyName: AllowEC2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:*
              Resource: "*"
        - PolicyName: AllowS3ToLamabda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource: !Sub 'arn:aws:s3:::${BucketName}'
# -------------------------------------------------------------------------
# Deploy S3 with event notification
# -------------------------------------------------------------------------
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:  
        LambdaConfigurations:
          - Event: 's3:ObjectRemoved:*'
            Function: !GetAtt LambdaDeleteMediaCounterFunction.Arn 

 